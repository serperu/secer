#!/usr/bin/env escript
%% -*- erlang -*-
%%! -sname secer_node -setcookie secer_cookie -pa ebin cuter/ebin cuter/lib/proper/ebin

% printer(String) -> 
% 	io:format("~p\n",[String]).

create_tmp_dir() ->
	filelib:ensure_dir("./tmp/").

remove_tmp_dir() ->
	file:del_dir_r("./tmp/").

compile_charge_module(Call) -> 
	case lists:member($:, Call) of
		true ->
			[Module | _] = string:tokens(Call, ":"), 

			% Module inside dir:
			_FilePath = filename:dirname(Module),
			ModuleName = filename:basename(Module),

			compile:file(Module++".erl", [{outdir, "./tmp/"}]), 
			code:purge(list_to_atom(ModuleName)), 
		 	code:load_abs("./tmp/"++ModuleName);
		false ->
			""
	end.

main([X]) when X == "-h" orelse X == "--help" ->
	io:format("~s\n", [help_message()]);

main(["-suite", Poi, "-funs", FunList, "-to", Time]) -> 
	SecerScriptPath = filename:dirname(escript:script_name()) ++ "/",
	code:add_pathsz([SecerScriptPath++"ebin",
					 SecerScriptPath++"cuter/ebin", 
					 SecerScriptPath++"cuter/lib/proper/ebin"]),
	create_tmp_dir(),

	PoiFun = Poi ++ ".",
	compile_charge_module(Poi),


	{ok, PoiTokens, _} = erl_scan:string(PoiFun), 
	{ok, PoiAbsForm} = erl_parse:parse_exprs(PoiTokens), 
	{value, PoiValue, _} = erl_eval:exprs(PoiAbsForm, []),


	ErlangFun = FunList ++ ".",
	compile_charge_module(FunList),

	FunctionFuns = case lists:member($:, FunList) of
		true ->
			{ok, FunTokens, _} = erl_scan:string(ErlangFun), 
			{ok, FunAbsForm} = erl_parse:parse_exprs(FunTokens), 
			{value, Funs, _} = erl_eval:exprs(FunAbsForm, []), 
			Funs;
		false ->
			FunList
	end, 

	InputFuns = string:tokens(FunctionFuns, ", []"), 

	Timeout = try
		case tuple_size(PoiValue) of 
			4 -> 4;
			_ -> throw(nan)
		end,
		list_to_integer(Time)
	catch 
		_:_ -> 
			{-1, -1}
	end, 
	case Timeout of 
		{-1, -1} -> 
			usage(3);
		_ -> 
			[secer:run_suite(PoiValue, string:strip(IFun, both), Timeout, SecerScriptPath)|| IFun <- InputFuns]
	end,
	remove_tmp_dir();

main(["-suite", Poi, "-to", Time]) -> 
	Res = try  
		case tuple_size(Poi) of 
			4 -> 4;
			_ -> throw(nan)
		end,
		list_to_integer(Time)
	catch 
		_:_ -> 
			{-1, -1}
	end, 
	case Res of 
		{-1, -1} -> 
			usage(3);
		_ -> 
			{File,_,_,_} = Poi,
			InputFuns = secer_input_gen:get_exports(File), 
			[secer:run_suite(Poi, IFun, Time)|| IFun <- InputFuns]
	end;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
									%%%%%%%%%%%%%%%%%
									%% NEW VERSION %%
									%%%%%%%%%%%%%%%%%
main(["-pois", Pois, "-funs", FunList, "-to", Time, "-config", Config]) ->
	SecerScriptPath = filename:dirname(escript:script_name()) ++ "/",
	code:add_pathsz([SecerScriptPath++"ebin",
					 SecerScriptPath++"cuter/ebin", 
					 SecerScriptPath++"cuter/lib/proper/ebin"]),
	create_tmp_dir(),

	PoisFun = Pois++".",
	compile_charge_module(Pois), 

	{ok, PoiTokens, _} = erl_scan:string(PoisFun), 
	{ok, PoiAbsForm} = erl_parse:parse_exprs(PoiTokens), 
	{value, PoisRels, _} = erl_eval:exprs(PoiAbsForm, []), 

	ErlangFun = FunList ++ ".",
	compile_charge_module(FunList),

	FunctionFuns = case lists:member($:, FunList) of
		true ->
			{ok, FunTokens, _} = erl_scan:string(ErlangFun), 
			{ok, FunAbsForm} = erl_parse:parse_exprs(FunTokens), 
			{value, Funs, _} = erl_eval:exprs(FunAbsForm, []), 
			Funs;
		false ->
			FunList
	end, 

	InputFuns = string:tokens(FunctionFuns, ", []"), 



	ConfigFun = Config++".", 
	compile_charge_module(ConfigFun),

	{ok, ConfigTokens, _} = erl_scan:string(ConfigFun), 
	{ok, ConfigAbsForm} = erl_parse:parse_exprs(ConfigTokens), 
	FinalConfig = 
		case catch erl_eval:exprs(ConfigAbsForm, []) of
			{value, FC, _} ->
				FC;
			{'EXIT',{undef,[{M, F, _, _} | _]}} ->
				io:format("The function ~p:~p is undefined\n", [M, F]),
				halt(0)
		end,

	Timeout = try  
			list_to_integer(Time)
		catch 
			_:_ -> 
				{-1, -1}
		end, 
	case Timeout of 
		{-1, -1} -> 
			usage(1);
		_ -> 
			[begin
				secer:run(PoisRels, string:strip(IFun, both), Timeout, {empty, FinalConfig}, SecerScriptPath)
			 end
			|| IFun<- InputFuns]
	end,
	remove_tmp_dir();

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

main(["-pois", Pois, "-funs", FunList, "-to", Time]) ->
	SecerScriptPath = filename:dirname(escript:script_name()) ++ "/",
	code:add_pathsz([SecerScriptPath++"ebin",
					 SecerScriptPath++"cuter/ebin", 
					 SecerScriptPath++"cuter/lib/proper/ebin"]),
	create_tmp_dir(),

	PoisFun = Pois++".",
	compile_charge_module(Pois), 

	{ok, PoiTokens, _} = erl_scan:string(PoisFun), 
	{ok, PoiAbsForm} = erl_parse:parse_exprs(PoiTokens), 
	{value, PoisRels, _} = erl_eval:exprs(PoiAbsForm, []), 

	ErlangFun = FunList ++ ".",
	compile_charge_module(FunList),

	FunctionFuns = case lists:member($:, FunList) of
		true ->
			{ok, FunTokens, _} = erl_scan:string(ErlangFun), 
			{ok, FunAbsForm} = erl_parse:parse_exprs(FunTokens), 
			{value, Funs, _} = erl_eval:exprs(FunAbsForm, []), 
			Funs;
		false ->
			FunList
	end, 

	InputFuns = string:tokens(FunctionFuns, ", []"), 

	Timeout = try  
			list_to_integer(Time)
		catch 
			_:_ -> 
				{-1, -1}
		end, 
	case Timeout of 
		{-1, -1} -> 
			usage(1);
		_ -> 
			[begin
				secer:run(PoisRels, string:strip(IFun, both), Timeout, {empty, empty}, SecerScriptPath)
			 end
			|| IFun<- InputFuns]
	end,
	remove_tmp_dir();

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%% EXPERIMENT REPEAT %%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% main(["-pois", Pois, "-funs", FunList, "-to", Time, "-random"]) ->
% 	PoisFun = Pois++".", 

% 	case lists:member($:, Pois) of
% 		true ->
% 			[Module | _] = string:tokens(Pois, ":"), 
% 			compile:file(Module++".erl", []), 
% 			code:purge(list_to_atom(Module)), 
% 		 	code:load_abs(Module);
% 		false ->
% 			ok
% 	end, 

% 	{ok, PoiTokens, _} = erl_scan:string(PoisFun), 
% 	{ok, PoiAbsForm} = erl_parse:parse_exprs(PoiTokens), 
% 	{value, PoisRels, _} = erl_eval:exprs(PoiAbsForm, []), 

% 	FunctionFuns = case lists:member($:, FunList) of
% 		true ->
% 			{ok, FunTokens, _} = erl_scan:string(FunList++"."), 
% 			{ok, FunAbsForm} = erl_parse:parse_exprs(FunTokens), 
% 			{value, Funs, _} = erl_eval:exprs(FunAbsForm, []), 
% 			Funs;
% 		false ->
% 			FunList
% 	end, 
% 	InputFuns = string:tokens(FunctionFuns, ", []"), 

% 	Timeout = try  
% 			list_to_integer(Time)
% 		catch 
% 			_:_ -> 
% 				{-1, -1}
% 		end, 
% 	case Timeout of 
% 		{-1, -1} -> 
% 			usage(1);
% 		_ -> 
% 			%io:format("~p\n", [InputFuns]), 
% 			[begin
% 				secer:run(PoisRels, string:strip(IFun, both), Timeout, sequential, empty, random)
% 			 end
% 			|| IFun<- InputFuns]
% 			%[secer:run(PoisRels, IFun, Timeout, independent, empty)|| IFun<- InputFuns]
% 			%[secer:run(PoisRels, IFun, Timeout, empty)|| IFun<- InputFuns]
% 	end;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% main(["-pois", Pois, "-funs", FunList, "-to", Time, "-silent"]) ->
% 	PoisFun = Pois++".", 

% 	case lists:member($:, Pois) of
% 		true ->
% 			[Module | _] = string:tokens(Pois, ":"), 
% 			compile:file(Module++".erl", []), 
% 			code:purge(list_to_atom(Module)), 
% 		 	code:load_abs(Module);
% 		false ->
% 			ok
% 	end, 

% 	{ok, PoiTokens, _} = erl_scan:string(PoisFun), 
% 	{ok, PoiAbsForm} = erl_parse:parse_exprs(PoiTokens), 
% 	{value, PoisRels, _} = erl_eval:exprs(PoiAbsForm, []), 

% 	FunctionFuns = case lists:member($:, FunList) of
% 		true ->
% 			{ok, FunTokens, _} = erl_scan:string(FunList++"."), 
% 			{ok, FunAbsForm} = erl_parse:parse_exprs(FunTokens), 
% 			{value, Funs, _} = erl_eval:exprs(FunAbsForm, []), 
% 			Funs;
% 		false ->
% 			FunList
% 	end, 
% 	InputFuns = string:tokens(FunctionFuns, ", []"), 

% 	Timeout = try  
% 			list_to_integer(Time)
% 		catch 
% 			_:_ -> 
% 				{-1, -1}
% 		end, 
% 	case Timeout of 
% 		{-1, -1} -> 
% 			usage(1);
% 		_ -> 
% 			%io:format("~p\n", [InputFuns]), 
% 			[begin
% 				secer:run(PoisRels, string:strip(IFun, both), Timeout, sequential, empty, silent)
% 			 end
% 			|| IFun<- InputFuns]
% 	end;

% %%%%%%%%%%%%%%%%%%%
% %%% FULL RANDOM %%%
% %%%%%%%%%%%%%%%%%%%

% main(["-pois", Pois, "-funs", FunList, "-to", Time, "-silent", "-random"]) ->
% 	PoisFun = Pois++".", 

% 	case lists:member($:, Pois) of
% 		true ->
% 			[Module | _] = string:tokens(Pois, ":"), 
% 			compile:file(Module++".erl", []), 
% 			code:purge(list_to_atom(Module)), 
% 		 	code:load_abs(Module);
% 		false ->
% 			ok
% 	end, 

% 	{ok, PoiTokens, _} = erl_scan:string(PoisFun), 
% 	{ok, PoiAbsForm} = erl_parse:parse_exprs(PoiTokens), 
% 	{value, PoisRels, _} = erl_eval:exprs(PoiAbsForm, []), 

% 	FunctionFuns = case lists:member($:, FunList) of
% 		true ->
% 			{ok, FunTokens, _} = erl_scan:string(FunList++"."), 
% 			{ok, FunAbsForm} = erl_parse:parse_exprs(FunTokens), 
% 			{value, Funs, _} = erl_eval:exprs(FunAbsForm, []), 
% 			Funs;
% 		false ->
% 			FunList
% 	end, 
% 	InputFuns = string:tokens(FunctionFuns, ", []"), 

% 	Timeout = try  
% 			list_to_integer(Time)
% 		catch 
% 			_:_ -> 
% 				{-1, -1}
% 		end, 
% 	case Timeout of 
% 		{-1, -1} -> 
% 			usage(1);
% 		_ -> 
% 			%io:format("~p\n", [InputFuns]), 
% 			[begin
% 				secer:run(PoisRels, string:strip(IFun, both), Timeout, sequential, empty, silent, random)
% 			 end
% 			|| IFun<- InputFuns]
% 	end;


% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% %%%%%%%%%%% USELESS %%%%%%%%%%%%%%
% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% main(["-pois", Pois, "-funs", FunList, "-to", Time, Flag]) ->
% 	PoisFun = Pois++".", 

% 	case lists:member($:, Pois) of
% 		true ->
% 			[Module | _] = string:tokens(Pois, ":"), 
% 			compile:file(Module++".erl", []), 
% 			code:purge(list_to_atom(Module)), 
% 		 	code:load_abs(Module);
% 		false ->
% 			ok
% 	end, 

% 	{ok, PoiTokens, _} = erl_scan:string(PoisFun), 
% 	{ok, PoiAbsForm} = erl_parse:parse_exprs(PoiTokens), 
% 	{value, PoisRels, _} = erl_eval:exprs(PoiAbsForm, []), 

% 	FunctionFuns = case lists:member($:, FunList) of
% 		true ->
% 			{ok, FunTokens, _} = erl_scan:string(FunList++"."), 
% 			{ok, FunAbsForm} = erl_parse:parse_exprs(FunTokens), 
% 			{value, Funs, _} = erl_eval:exprs(FunAbsForm, []), 
% 			Funs;
% 		false ->
% 			FunList
% 	end, 
% 	InputFuns = string:tokens(FunctionFuns, ", []"), 

% 	Timeout = try  
% 			list_to_integer(Time)
% 		catch 
% 			_:_ -> 
% 				{-1, -1}
% 		end, 
% 	case Timeout of 
% 		{-1, -1} -> 
% 			usage(1);
% 		_ -> 
% 			%[secer:run(PoisRels, IFun, Timeout, independent, empty)|| IFun<- InputFuns]
% 			%[secer:run(PoisRels, IFun, Timeout, empty)|| IFun<- InputFuns]
% 			case Flag of
% 				"-independent" ->
% 					[secer:run(PoisRels, string:strip(IFun, both), Timeout, independent, empty)|| IFun<- InputFuns];
% 				_ ->
% 					[secer:run(PoisRels, string:strip(IFun, both), Timeout, sequential, empty)|| IFun<- InputFuns]		
% 			end
% 	end;


main(_) ->
    usage(1).

usage(1) ->
    io:format("Error in command\nUsage: secer -f file1.erl -li line1 -var variable1 [-oc occurrence1] 
            [-f file2.erl -li line2 -var variable2 [-oc occurrence2]]          
             -funs input_function -to timeout\n"), 
    halt(1);

usage(2) ->
	io:format("Usage: secer -f file.erl -li line -var variable [-oc occurrence] [-funs input_functions] -to timeout\n"), 
	halt(1);

usage(3) ->
	io:format("Usage: secer -suite POI -funs input_functions -to timeout\n"), 
	halt(1).

help_message() ->
	"
  Usage: secer [--help] -f file -li line -var variable [-oc occurrence] 
                       [-f file -li line -var variable [-oc occurrence]]
                       [-funs input_function*] -to timeout

  Options:
    -f file.erl
            indicate the selected file.erl where 
            secer must be executed
    -li line_number
            indicate the line in the specified file 
            where the interest point is located
    -var var_name
            indicate the name of the variable defined 
            as interest point
    -oc occurrence_number
            indicate the occurrence number of the 
            selected variable in the specified line
            (1 by default).
    -funs fun_name/arity*
            indicate a list of the exported function/arity 
            that are being called to test the value of the 
            interest point. Each function/arity expend
            the stablished timeout to calculate its own 
            set of tests (all exported functions by default)
    -to timeout
            indicate the time that the user want to 
            wait for the execution of secer in seconds
    --help (or -h)
            Prints this message and exits

    Note:
        * denotes that multiple occurrences of these options are possible.".