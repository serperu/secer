#!/usr/bin/env escript
%% -*- erlang -*-
%%! -sname secer_node -setcookie secer_cookie -pa ebin cuter/ebin cuter/lib/proper/ebin

main([X]) when X == "-h" orelse X == "--help" ->
	io:format("~s\n", [help_message()]);

main(["-pois", Pois, "-funs", FunList, "-to", Time, "-cfun", CFun]) ->
	PoisFun = Pois++".", 

	case lists:member($:, Pois) of
		true ->
			[Module | _] = string:tokens(Pois, ":"), 
			compile:file(Module++".erl", [{outdir, "./tmp/"}]), 
			code:purge(list_to_atom(Module)), 
		 	code:load_abs(Module);
		false ->
			ok
	end, 

	{ok, PoiTokens, _} = erl_scan:string(PoisFun), 
	{ok, PoiAbsForm} = erl_parse:parse_exprs(PoiTokens), 
	{value, PoisRels, _} = erl_eval:exprs(PoiAbsForm, []), 

	FunctionFuns = case lists:member($:, FunList) of
		true ->
			{ok, FunTokens, _} = erl_scan:string(FunList++"."), 
			{ok, FunAbsForm} = erl_parse:parse_exprs(FunTokens), 
			{value, Funs, _} = erl_eval:exprs(FunAbsForm, []), 
			Funs;
		false ->
			FunList
	end, 
	InputFuns = string:tokens(FunctionFuns, ", []"), 

	Tokens = string:tokens(CFun, ":"), 
	{ok, CFunTokens, _} = case length(Tokens) of
		2 ->
			[Tok1, Tok2] = Tokens, 
			case Tok1 of
				 "secer" ->
					Existent = 
						lists:prefix("lower_than", Tok2) or 
						lists:prefix("greater_than", Tok2) or 
						lists:prefix("different", Tok2) or 
						lists:prefix("show", Tok2) or 
						lists:prefix("comp_perf", Tok2) or 
						lists:prefix("lists_comp_perf", Tok2), 
					case Existent of
						true ->
							erl_scan:string("secer_cfuns:"++Tok2++".");
						_ ->
							secer_functions(), 
							halt(1)
					end;
				_ ->
					erl_scan:string("fun "++CFun++"/3.")
			end;
		_ ->
			erl_scan:string("fun "++CFun++"/3.")
	end, 

	{ok, CFunAbsForm} = erl_parse:parse_exprs(CFunTokens), 
	{value, CompareFun, _} = erl_eval:exprs(CFunAbsForm, []), 

	Timeout = try  
			list_to_integer(Time)
		catch 
			_:_ -> 
				{-1, -1}
		end, 
	case Timeout of 
		{-1, -1} -> 
			usage(1);
		_ -> 
			[secer:run(PoisRels, string:strip(IFun, both), Timeout, sequential, CompareFun)|| IFun<- InputFuns]
			%[secer:run(PoisRels, IFun, Timeout, independent, CompareFun)|| IFun<- InputFuns]
			%[secer:run(PoisRels, IFun, Timeout, empty)|| IFun<- InputFuns]
	end;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
									%%%%%%%%%%%%%%%%%
									%% NEW VERSION %%
									%%%%%%%%%%%%%%%%%
main(["-pois", Pois, "-funs", FunList, "-to", Time, "-config", Config]) ->
	PoisFun = Pois++".", 

	case lists:member($:, Pois) of
		true ->
			[Module | _] = string:tokens(Pois, ":"), 
			compile:file(Module++".erl", [{outdir, "./tmp/"}]), 
			code:purge(list_to_atom(Module)), 
		 	code:load_abs("./tmp/"++Module);
		false ->
			ok
	end, 

	{ok, PoiTokens, _} = erl_scan:string(PoisFun), 
	{ok, PoiAbsForm} = erl_parse:parse_exprs(PoiTokens), 
	{value, PoisRels, _} = erl_eval:exprs(PoiAbsForm, []), 

	FunctionFuns = case lists:member($:, FunList) of
		true ->
			{ok, FunTokens, _} = erl_scan:string(FunList++"."), 
			{ok, FunAbsForm} = erl_parse:parse_exprs(FunTokens), 
			{value, Funs, _} = erl_eval:exprs(FunAbsForm, []), 
			Funs;
		false ->
			FunList
	end, 
	InputFuns = string:tokens(FunctionFuns, ", []"), 

	ConfigFun = Config++".", 
	{ok, ConfigTokens, _} = erl_scan:string(ConfigFun), 
	{ok, ConfigAbsForm} = erl_parse:parse_exprs(ConfigTokens), 
	FinalConfig = 
		case catch erl_eval:exprs(ConfigAbsForm, []) of
			{value, FC, _} ->
				FC;
			{'EXIT',{undef,[{M, F, _, _} | _]}} ->
				io:format("The function ~p:~p is undefined\n", [M, F]),
				halt(0)
		end,

	Timeout = try  
			list_to_integer(Time)
		catch 
			_:_ -> 
				{-1, -1}
		end, 
	case Timeout of 
		{-1, -1} -> 
			usage(1);
		_ -> 
			%io:format("~p\n", [InputFuns]), 
			[begin
				secer:run(PoisRels, string:strip(IFun, both), Timeout, {empty, FinalConfig})
			 end
			|| IFun<- InputFuns]
			%[secer:run(PoisRels, IFun, Timeout, independent, empty)|| IFun<- InputFuns]
			%[secer:run(PoisRels, IFun, Timeout, empty)|| IFun<- InputFuns]
	end;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

main(["-pois", Pois, "-funs", FunList, "-to", Time]) ->
	PoisFun = Pois++".", 

	case lists:member($:, Pois) of
		true ->
			[Module | _] = string:tokens(Pois, ":"), 
			compile:file(Module++".erl", [{outdir, "./tmp/"}]), 
			code:purge(list_to_atom(Module)), 
		 	code:load_abs("./tmp/"++Module);
		false ->
			ok
	end, 

	{ok, PoiTokens, _} = erl_scan:string(PoisFun), 
	{ok, PoiAbsForm} = erl_parse:parse_exprs(PoiTokens), 
	{value, PoisRels, _} = erl_eval:exprs(PoiAbsForm, []), 

	FunctionFuns = case lists:member($:, FunList) of
		true ->
			{ok, FunTokens, _} = erl_scan:string(FunList++"."), 
			{ok, FunAbsForm} = erl_parse:parse_exprs(FunTokens), 
			{value, Funs, _} = erl_eval:exprs(FunAbsForm, []), 
			Funs;
		false ->
			FunList
	end, 
	InputFuns = string:tokens(FunctionFuns, ", []"), 

	Timeout = try  
			list_to_integer(Time)
		catch 
			_:_ -> 
				{-1, -1}
		end, 
	case Timeout of 
		{-1, -1} -> 
			usage(1);
		_ -> 
			%io:format("~p\n", [InputFuns]), 
			[begin
				secer:run(PoisRels, string:strip(IFun, both), Timeout, empty)
			 end
			|| IFun<- InputFuns]
			%[secer:run(PoisRels, IFun, Timeout, independent, empty)|| IFun<- InputFuns]
			%[secer:run(PoisRels, IFun, Timeout, empty)|| IFun<- InputFuns]
	end;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%% EXPERIMENT REPEAT %%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% main(["-pois", Pois, "-funs", FunList, "-to", Time, "-random"]) ->
% 	PoisFun = Pois++".", 

% 	case lists:member($:, Pois) of
% 		true ->
% 			[Module | _] = string:tokens(Pois, ":"), 
% 			compile:file(Module++".erl", []), 
% 			code:purge(list_to_atom(Module)), 
% 		 	code:load_abs(Module);
% 		false ->
% 			ok
% 	end, 

% 	{ok, PoiTokens, _} = erl_scan:string(PoisFun), 
% 	{ok, PoiAbsForm} = erl_parse:parse_exprs(PoiTokens), 
% 	{value, PoisRels, _} = erl_eval:exprs(PoiAbsForm, []), 

% 	FunctionFuns = case lists:member($:, FunList) of
% 		true ->
% 			{ok, FunTokens, _} = erl_scan:string(FunList++"."), 
% 			{ok, FunAbsForm} = erl_parse:parse_exprs(FunTokens), 
% 			{value, Funs, _} = erl_eval:exprs(FunAbsForm, []), 
% 			Funs;
% 		false ->
% 			FunList
% 	end, 
% 	InputFuns = string:tokens(FunctionFuns, ", []"), 

% 	Timeout = try  
% 			list_to_integer(Time)
% 		catch 
% 			_:_ -> 
% 				{-1, -1}
% 		end, 
% 	case Timeout of 
% 		{-1, -1} -> 
% 			usage(1);
% 		_ -> 
% 			%io:format("~p\n", [InputFuns]), 
% 			[begin
% 				secer:run(PoisRels, string:strip(IFun, both), Timeout, sequential, empty, random)
% 			 end
% 			|| IFun<- InputFuns]
% 			%[secer:run(PoisRels, IFun, Timeout, independent, empty)|| IFun<- InputFuns]
% 			%[secer:run(PoisRels, IFun, Timeout, empty)|| IFun<- InputFuns]
% 	end;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
main(["-pois", Pois, "-funs", FunList, "-to", Time, "-silent"]) ->
	PoisFun = Pois++".", 

	case lists:member($:, Pois) of
		true ->
			[Module | _] = string:tokens(Pois, ":"), 
			compile:file(Module++".erl", []), 
			code:purge(list_to_atom(Module)), 
		 	code:load_abs(Module);
		false ->
			ok
	end, 

	{ok, PoiTokens, _} = erl_scan:string(PoisFun), 
	{ok, PoiAbsForm} = erl_parse:parse_exprs(PoiTokens), 
	{value, PoisRels, _} = erl_eval:exprs(PoiAbsForm, []), 

	FunctionFuns = case lists:member($:, FunList) of
		true ->
			{ok, FunTokens, _} = erl_scan:string(FunList++"."), 
			{ok, FunAbsForm} = erl_parse:parse_exprs(FunTokens), 
			{value, Funs, _} = erl_eval:exprs(FunAbsForm, []), 
			Funs;
		false ->
			FunList
	end, 
	InputFuns = string:tokens(FunctionFuns, ", []"), 

	Timeout = try  
			list_to_integer(Time)
		catch 
			_:_ -> 
				{-1, -1}
		end, 
	case Timeout of 
		{-1, -1} -> 
			usage(1);
		_ -> 
			%io:format("~p\n", [InputFuns]), 
			[begin
				secer:run(PoisRels, string:strip(IFun, both), Timeout, sequential, empty, silent)
			 end
			|| IFun<- InputFuns]
	end;

%%%%%%%%%%%%%%%%%%%
%%% FULL RANDOM %%%
%%%%%%%%%%%%%%%%%%%

main(["-pois", Pois, "-funs", FunList, "-to", Time, "-silent", "-random"]) ->
	PoisFun = Pois++".", 

	case lists:member($:, Pois) of
		true ->
			[Module | _] = string:tokens(Pois, ":"), 
			compile:file(Module++".erl", []), 
			code:purge(list_to_atom(Module)), 
		 	code:load_abs(Module);
		false ->
			ok
	end, 

	{ok, PoiTokens, _} = erl_scan:string(PoisFun), 
	{ok, PoiAbsForm} = erl_parse:parse_exprs(PoiTokens), 
	{value, PoisRels, _} = erl_eval:exprs(PoiAbsForm, []), 

	FunctionFuns = case lists:member($:, FunList) of
		true ->
			{ok, FunTokens, _} = erl_scan:string(FunList++"."), 
			{ok, FunAbsForm} = erl_parse:parse_exprs(FunTokens), 
			{value, Funs, _} = erl_eval:exprs(FunAbsForm, []), 
			Funs;
		false ->
			FunList
	end, 
	InputFuns = string:tokens(FunctionFuns, ", []"), 

	Timeout = try  
			list_to_integer(Time)
		catch 
			_:_ -> 
				{-1, -1}
		end, 
	case Timeout of 
		{-1, -1} -> 
			usage(1);
		_ -> 
			%io:format("~p\n", [InputFuns]), 
			[begin
				secer:run(PoisRels, string:strip(IFun, both), Timeout, sequential, empty, silent, random)
			 end
			|| IFun<- InputFuns]
	end;


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

main(["-pois", Pois, "-funs", FunList, "-to", Time, Flag]) ->
	PoisFun = Pois++".", 

	case lists:member($:, Pois) of
		true ->
			[Module | _] = string:tokens(Pois, ":"), 
			compile:file(Module++".erl", []), 
			code:purge(list_to_atom(Module)), 
		 	code:load_abs(Module);
		false ->
			ok
	end, 

	{ok, PoiTokens, _} = erl_scan:string(PoisFun), 
	{ok, PoiAbsForm} = erl_parse:parse_exprs(PoiTokens), 
	{value, PoisRels, _} = erl_eval:exprs(PoiAbsForm, []), 

	FunctionFuns = case lists:member($:, FunList) of
		true ->
			{ok, FunTokens, _} = erl_scan:string(FunList++"."), 
			{ok, FunAbsForm} = erl_parse:parse_exprs(FunTokens), 
			{value, Funs, _} = erl_eval:exprs(FunAbsForm, []), 
			Funs;
		false ->
			FunList
	end, 
	InputFuns = string:tokens(FunctionFuns, ", []"), 

	Timeout = try  
			list_to_integer(Time)
		catch 
			_:_ -> 
				{-1, -1}
		end, 
	case Timeout of 
		{-1, -1} -> 
			usage(1);
		_ -> 
			%[secer:run(PoisRels, IFun, Timeout, independent, empty)|| IFun<- InputFuns]
			%[secer:run(PoisRels, IFun, Timeout, empty)|| IFun<- InputFuns]
			case Flag of
				"-independent" ->
					[secer:run(PoisRels, string:strip(IFun, both), Timeout, independent, empty)|| IFun<- InputFuns];
				_ ->
					[secer:run(PoisRels, string:strip(IFun, both), Timeout, sequential, empty)|| IFun<- InputFuns]		
			end
	end;












main([
		"-f", File1, 
		"-li", Line1, 
		"-var", Var1, 
		"-oc", Oc1, 
		"-f", File2, 
		"-li", Line2, 
		"-var", Var2, 
		"-oc", Oc2, 
		"-funs", Fun, 
		"-to", Time
	]) -> 

        InputFuns = string:tokens(Fun, ", []"), 
		Res = try  
			{list_to_integer(Line1), 
			 list_to_integer(Line2), 
			 list_to_integer(Oc1), 
			 list_to_integer(Oc2), 
			 list_to_integer(Time)}
		catch 
			_:_ -> 
				{-1, -1}
		end, 
		case Res of 
			{-1, -1} -> 
				usage(1);
			{L1, L2, O1, O2, T} ->
				PoisRels = 
					[{{list_to_atom(File1), L1, {var, list_to_atom(Var1)}, O1}, 
					  {list_to_atom(File2), L2, {var, list_to_atom(Var2)}, O2}}], 
				[secer:run(PoisRels, IFun, T, sequential, empty)|| IFun<- InputFuns] %NEWFORMAT
				
		end;
main([
		"-f", File1, 
		"-li", Line1, 
		"-var", Var1, 
		"-oc", Oc1, 
		"-f", File2, 
		"-li", Line2, 
		"-var", Var2, 
		"-oc", Oc2, 
		"-to", Time
	]) -> 

		Res = try  
			{list_to_integer(Line1), 
			 list_to_integer(Line2), 
			 list_to_integer(Oc1), 
			 list_to_integer(Oc2), 
			 list_to_integer(Time)}
		catch 
			_:_ -> 
				{-1, -1}
		end, 
		case Res of 
			{-1, -1} -> 
				usage(1);
			{L1, L2, O1, O2, T} -> 
				InputFuns = secer_input_gen:get_exports(File1), 
				PoisRels = 
					[{{list_to_atom(File1), L1, {var, list_to_atom(Var1)}, O1}, 
					  {list_to_atom(File2), L2, {var, list_to_atom(Var2)}, O2}}], 
				[secer:run(PoisRels, IFun, T, sequential, empty)|| IFun<- InputFuns] %NEWFORMAT
		end;
main([
		"-f", File1, 
		"-li", Line1, 
		"-var", Var1, 
		"-f", File2, 
		"-li", Line2, 
		"-var", Var2, 
		"-funs", Fun, 
		"-to", Time
	]) -> 

        InputFuns = string:tokens(Fun, ", []"), 
		Res = try  
			list_to_integer(Line1), 
			list_to_integer(Line2), 
			list_to_integer(Time)
		catch 
			_:_ -> 
				{-1, -1}
		end, 
		case Res of 
			{-1, -1} -> 
				usage(1);
			{L1, L2, T} -> 
				PoisRels = 
					[{{list_to_atom(File1), L1, {var, list_to_atom(Var1)}, 1}, 
					  {list_to_atom(File2), L2, {var, list_to_atom(Var2)}, 1}}], 
				[secer:run(PoisRels, IFun, T, sequential, empty)|| IFun<- InputFuns] %NEWFORMAT
		end;
main([
		"-f", File1, 
		"-li", Line1, 
		"-var", Var1, 
		"-f", File2, 
		"-li", Line2, 
		"-var", Var2, 
		"-to", Time
	]) -> 

		Res = try  
			list_to_integer(Line1), 
			list_to_integer(Line2), 
			list_to_integer(Time)
		catch 
			_:_ -> 
				{-1, -1}
		end, 
		case Res of 
			{-1, -1} -> 
				usage(1);
			{L1, L2, T} -> 
				InputFuns = secer_input_gen:get_exports(File1), 
				PoisRels = 
					[{{list_to_atom(File1), L1, {var, list_to_atom(Var1)}, 1}, 
					  {list_to_atom(File2), L2, {var, list_to_atom(Var2)}, 1}}], 
				[secer:run(PoisRels, IFun, T, sequential, empty)|| IFun<- InputFuns] %NEWFORMAT
		end;

main([
		"-f", File1, 
		"-li", Line1, 
		"-var", Var1, 
		"-f", File2, 
		"-li", Line2, 
		"-var", Var2, 
		"-oc", Oc2, 
		"-funs", Fun, 
		"-to", Time
	]) -> 

        InputFuns = string:tokens(Fun, ", []"), 
		Res = try  
			list_to_integer(Line1), 
			list_to_integer(Line2), 
			list_to_integer(Oc2), 
			list_to_integer(Time)
		catch 
			_:_ -> 
				{-1, -1}
		end, 
		case Res of 
			{-1, -1} -> 
				usage(1);
			{L1, L2, O2, T} -> 
				PoisRels = 
					[{{list_to_atom(File1), L1, {var, list_to_atom(Var1)}, 1}, 
					  {list_to_atom(File2), L2, {var, list_to_atom(Var2)}, O2}}], 
				[secer:run(PoisRels, IFun, T, sequential, empty)|| IFun<- InputFuns] %NEWFORMAT
		end;
main([
		"-f", File1, 
		"-li", Line1, 
		"-var", Var1, 
		"-f", File2, 
		"-li", Line2, 
		"-var", Var2, 
		"-oc", Oc2, 
		"-to", Time
	]) -> 

		Res = try  
			list_to_integer(Line1), 
			list_to_integer(Line2), 
			list_to_integer(Oc2), 
			list_to_integer(Time)
		catch 
			_:_ -> 
				{-1, -1}
		end, 
		case Res of 
			{-1, -1} -> 
				usage(1);
			{L1, L2, O2, T} -> 
				InputFuns = secer_input_gen:get_exports(File1), 
				PoisRels = 
					[{{list_to_atom(File1), L1, {var, list_to_atom(Var1)}, 1}, 
					  {list_to_atom(File2), L2, {var, list_to_atom(Var2)}, O2}}], 
				[secer:run(PoisRels, IFun, T, sequential, empty)|| IFun<- InputFuns] %NEWFORMAT
		end;
main([
		"-f", File1, 
		"-li", Line1, 
		"-var", Var1, 
		"-oc", Oc1, 
		"-f", File2, 
		"-li", Line2, 
		"-var", Var2, 
		"-funs", Fun, 
		"-to", Time
	]) -> 

        InputFuns = string:tokens(Fun, ", []"), 
		Res = try  
			list_to_integer(Line1), 
			list_to_integer(Line2), 
			list_to_integer(Oc1), 
			list_to_integer(Time)
		catch 
			_:_ -> 
				{-1, -1}
		end, 
		case Res of 
			{-1, -1} -> 
				usage(1);
			{L1, L2, O1, T} -> 
				PoisRels = 
					[{{list_to_atom(File1), L1, {var, list_to_atom(Var1)}, O1}, 
					  {list_to_atom(File2), L2, {var, list_to_atom(Var2)}, 1}}], 
				[secer:run(PoisRels, IFun, T, sequential, empty)|| IFun<- InputFuns] %NEWFORMAT
		end;
main([
		"-f", File1, 
		"-li", Line1, 
		"-var", Var1, 
		"-oc", Oc1, 
		"-f", File2, 
		"-li", Line2, 
		"-var", Var2, 
		"-to", Time
	]) -> 
		Res = try  
			list_to_integer(Line1), 
			list_to_integer(Line2), 
			list_to_integer(Oc1), 
			list_to_integer(Time)
		catch 
			_:_ -> 
				{-1, -1}
		end, 
		case Res of 
			{-1, -1} -> 
				usage(1);
			{L1, L2, O1, T} -> 
				InputFuns = secer_input_gen:get_exports(File1), 
				PoisRels = 
					[{{list_to_atom(File1), L1, {var, list_to_atom(Var1)}, O1}, 
					  {list_to_atom(File2), L2, {var, list_to_atom(Var2)}, 1}}], 
				[secer:run(PoisRels, IFun, T, sequential, empty)|| IFun<- InputFuns] %NEWFORMAT
		end;

% SOLO UN ARCHIVO, ¿eliminar esto?
main([
		"-f", File, 
		"-li", Line, 
		"-var", Var, 
		"-oc", Oc, 
		"-funs", Fun, 
		"-to", Time
	]) -> 

        InputFuns = string:tokens(Fun, ", []"), 
		Res = try  
			list_to_integer(Line), 
			list_to_integer(Oc), 
			list_to_integer(Time)
		catch 
			_:_ -> 
				{-1, -1}
		end, 
		case Res of 
			{-1, -1} -> 
				usage(2);
			_ -> 
				[secer:run([File, Line, Var, Oc, IFun, Time])|| IFun<- InputFuns]
		end;
main([
		"-f", File, 
		"-li", Line, 
		"-var", Var, 
		"-oc", Oc, 
		"-to", Time
	]) -> 
		Res = try  
			list_to_integer(Line), 
			list_to_integer(Oc), 
			list_to_integer(Time)
		catch 
			_:_ -> 
				{-1, -1}
		end, 
		case Res of 
			{-1, -1} -> 
				usage(2);
			_ -> 
				InputFuns = secer_input_gen:get_exports(File), 
				[secer:run([File, Line, Var, Oc, IFun, Time])|| IFun<- InputFuns]
		end;
main([
		"-f", File, 
		"-li", Line, 
		"-var", Var, 
		"-funs", Fun, 
		"-to", Time
	]) -> 

        InputFuns = string:tokens(Fun, ", []"), 
		Res = try  
			list_to_integer(Line), 
			list_to_integer(Time)
		catch 
			_:_ -> 
				{-1, -1}
		end, 
		case Res of 
			{-1, -1} -> 
				usage(2);
			_ -> 
				[secer:run([File, Line, Var, "1", IFun, Time])|| IFun<- InputFuns]
		end;
main([
		"-f", File, 
		"-li", Line, 
		"-var", Var, 
		"-to", Time
	]) -> 
		Res = try  
			list_to_integer(Line), 
			list_to_integer(Time)
		catch 
			_:_ -> 
				{-1, -1}
		end, 
		case Res of 
			{-1, -1} -> 
				usage(2);
			_ -> 
				InputFuns = secer_input_gen:get_exports(File), 
				[secer:run([File, Line, Var, "1", IFun, Time])|| IFun<- InputFuns]
		end;
main(_) ->
    usage(1).

usage(1) ->
    io:format("Error in command\nUsage: secer -f file1.erl -li line1 -var variable1 [-oc occurrence1] 
            [-f file2.erl -li line2 -var variable2 [-oc occurrence2]]          
             -funs input_function -to timeout\n"), 
    halt(1);
usage(2) ->
	io:format("Usage: secer -f file.erl -li line -var variable [-oc occurrence] [-funs input_functions] -to timeout\n"), 
	halt(1).

secer_functions() ->
	io:format("The currently available secer compare functions are:
    lower_than()
    greater_than()
    different()
    show()
    comp_perf()
    lists_comp_perf()\n").
help_message() ->
	"
  Usage: secer [--help] -f file -li line -var variable [-oc occurrence] 
                       [-f file -li line -var variable [-oc occurrence]]
                       [-funs input_function*] -to timeout

  Options:
    -f file.erl
            indicate the selected file.erl where 
            secer must be executed
    -li line_number
            indicate the line in the specified file 
            where the interest point is located
    -var var_name
            indicate the name of the variable defined 
            as interest point
    -oc occurrence_number
            indicate the occurrence number of the 
            selected variable in the specified line
            (1 by default).
    -funs fun_name/arity*
            indicate a list of the exported function/arity 
            that are being called to test the value of the 
            interest point. Each function/arity expend
            the stablished timeout to calculate its own 
            set of tests (all exported functions by default)
    -to timeout
            indicate the time that the user want to 
            wait for the execution of secer in seconds
    --help (or -h)
            Prints this message and exits

    Note:
        * denotes that multiple occurrences of these options are possible.".